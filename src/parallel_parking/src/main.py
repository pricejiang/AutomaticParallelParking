import rospy
import numpy as np
import argparse

from gazebo_msgs.msg import  ModelState
from controller.controller import VehicleController
from perception.perception import VehiclePerception
from decision.decision import VehicleDecision
from util.util import euler_to_quaternion, quaternion_to_euler
from std_msgs.msg import Float32
import time
import pickle

# theta = [0.0, 0.029583925305344615, 0.05921408009757669, 0.08891685844998544, 0.11871923782174466, 0.14864900822938693, 0.17873502021788523, 0.20900745811205132, 0.2394981462471894, 0.2702408975430531, 0.30127191604150266, 0.3326302680845194, 0.36435844096767855, 0.3965030136083065, 0.42911547167611425, 0.462253210741976, 0.49598078683709085, 0.5303714967799077, 0.565509404573289, 0.6014919814386465, 0.6384336063695326, 0.6764703002107149, 0.7157662731815019, 0.7565232176174645, 0.7989939015237478, 0.8435027802322914, 0.8316451742336197, 0.7887586880595199, 0.7476499956014122, 0.7080527038869882, 0.6697552837559617, 0.6325862272957427, 0.596403975305336, 0.5610898642583626, 0.5265430538914333, 0.49267679392202773, 0.459415620083236, 0.42669320983989334, 0.39445071573451745, 0.36263545059753965, 0.33119983593872526, 0.3001005498118582, 0.26929782759867926, 0.23875488114737822, 0.20843741021055845, 0.17831318624891773, 0.14835169312001675, 0.11852381243930675, 0.08880154381169787, 0.05915775191234876, 0.029565933701624508, 0.0]
# theta = [0.0, 0.02956699533369955, 0.05916185618869667, 0.08881069586587247, 0.11854005780671588, 0.14837713492696808, 0.17835000372459975, 0.20848787899712226, 0.2388213959689556, 0.2693829279676597, 0.30020694961015165, 0.3313304579274714, 0.3627934672017673, 0.39463959785016656, 0.42691678596467847, 0.4596781488481297, 0.49298305420063177, 0.5268984582525911, 0.5615006038616522, 0.5968772078422624, 0.6331303249609351, 0.6703801667202512, 0.7087702985379363, 0.7484748800161479, 0.7897090277744169, 0.8327441258097901, 0.8779313193623688, 0.9257392704994366, 0.9242412859057587, 0.8766534152506623, 0.8316451742336385, 0.7887586880595376, 0.7476499956014278, 0.7080527038870044, 0.6697552837559757, 0.6325862272957559, 0.5964039753053484, 0.5610898642583745, 0.5265430538914434, 0.4926767939220371, 0.45941562008324477, 0.42669320983990167, 0.394450715734525, 0.3626354505975456, 0.3311998359387321, 0.30010054981186457, 0.26929782759868387, 0.23875488114738197, 0.20843741021056222, 0.17831318624892023, 0.148351693120019, 0.11852381243930864, 0.08880154381170038, 0.05915775191235252, 0.029565933701624508, 0.0]
#
speed = [0.05296577757114048, 0.05296577757114048, 0.05296577757114048, 0.05296577757114048, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975,  0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.39136710179663975, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.14397591070183482, 0.05296577757114048, 0.05296577757114048, 0.05296577757114048]

centerTheta = 0

def parkingCallback(data):
    global centerTheta
    centerTheta = data.data

# def gaussian(x, mu=len(theta)/2, sigma=15):
#     return 1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (x - mu)**2 / (2 * sigma**2))

def run_model(model_name):
    global centerTheta

    rate = rospy.Rate(10)  # 100 Hz

    # print(len(theta))
    # print(len(speed))
    # assert(len(theta) == len(speed))

    perceptionModule = VehiclePerception(model_name)
    # decisionModule = VehicleDecision('./waypoints')
    controlModule = VehicleController(model_name)
    # centerTheta = max(theta)
    flag = 0
    idx = 0
    currState =  perceptionModule.gpsReading()

    currentEuler = quaternion_to_euler(currState.pose.orientation.x,
                                       currState.pose.orientation.y,
                                       currState.pose.orientation.z,
                                       currState.pose.orientation.w)

    init_euler = currentEuler[2]

    refState = [flag, -1.39136710179663975]
    controlModule.execute(currState, refState)
    while not rospy.is_shutdown():
        # res = sensors.lidarReading()
        if centerTheta == 0:
            continue
        # print(res)
        rate.sleep()  # Wait a while before trying to get a new state

        # Get the current position and orientation of the vehicle
        currState =  perceptionModule.gpsReading()

        currentEuler = quaternion_to_euler(currState.pose.orientation.x,
                                           currState.pose.orientation.y,
                                           currState.pose.orientation.z,
                                           currState.pose.orientation.w)

        print("Current heading: ", currentEuler[2])
        print("flag is ", flag)
        if currentEuler[2] > centerTheta and not flag:
            flag = 1

        refState = [flag, -1.39136710179663975]
        controlModule.execute(currState, refState)

        # if abs(currentEuler[2] - theta[idx]) < 0.05:
        print("idx: ", idx)

        if flag and abs(init_euler-currentEuler[2]) < 0.1:
            controlModule.forward()
            break
        print()



if __name__ == "__main__":
    rospy.init_node("gem_dynamics")

    parkingSub = rospy.Subscriber("/gem/ParkingInfo", Float32, parkingCallback)

    run_model('gem')
